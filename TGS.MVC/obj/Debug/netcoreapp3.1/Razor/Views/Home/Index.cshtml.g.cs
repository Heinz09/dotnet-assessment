#pragma checksum "C:\Users\Heinz\Source\Repos\dotnet-assessment\TGS.MVC\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d6563149a780e06cbeec72739d0eea2f70e3bfbd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Heinz\Source\Repos\dotnet-assessment\TGS.MVC\Views\_ViewImports.cshtml"
using TGS.MVC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Heinz\Source\Repos\dotnet-assessment\TGS.MVC\Views\_ViewImports.cshtml"
using TGS.MVC.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d6563149a780e06cbeec72739d0eea2f70e3bfbd", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7cae428216fec32b7d626ea02657b260f5176fea", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Heinz\Source\Repos\dotnet-assessment\TGS.MVC\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">TGS Tests</h1>
    
    <p>
        I enjoyed the test, I started with a small CLI application just to get it all hooked up and added MVC for a bit more of a front end. Eventually decided it is overkill and just quickly added NSWag.
    
        A quick overview of what I have been up to can be found <a href=""https://www.linkedin.com/in/heinrich-ludike-6ba0529/"">here</a>.
    </p>
    
    <ul>
        <li>C#</li>
        <li>DotNet Core 3.1</li>
        <li>Swagger</li>
        <li>MVC <i>Not needed, but added</i></li>
        <li>CLI <i>old school CLI</i></li>
        <li><b>NO LINQ</b></li>
    </ul>
</div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
